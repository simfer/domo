<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" dir="ltr">

<head>
    <meta http-equiv="content-type" content="application/xhtml+xml; charset=UTF-8" />

    <meta http-equiv="X-UA-Compatible" content="chrome=1">
    <meta name="google" value="notranslate">

    <link rel="stylesheet" href="/node_modules/bootstrap/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/node_modules/bootstrap/dist/css/bootstrap-theme.min.css">

    <link href="/assets/styles/style.css" rel="stylesheet">

    <title>Domotica</title>
</head>

<body>
    <nav class="navbar navbar-default">
        <div class="container-fluid">
            <div class="navbar-header">
                <a class="navbar-brand" href="#">Domotica - Home</a>
            </div>
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                <ul class="nav navbar-nav navbar-right">
                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Menu <span class="caret"></span></a>
                        <ul class="dropdown-menu">
                            <li><a href="#">My profile</a></li>
                            <li><a href="#">Settings</a></li>
                            <li role="separator" class="divider"></li>
                            <li><a href="/">Logout</a></li>
                        </ul>
                    </li>
                </ul>
            </div>
            <!-- /.navbar-collapse -->
        </div>
        <!-- /.container-fluid -->
    </nav>
    <!-- Edit form for INPUT -->
    <div class="modal fade" id="frmInput" tabindex="-1" role="dialog" aria-labelledby="frmInputLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="frmInputLabel">
                        <% language.msgInEditTitle %>
                    </h5>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="frmInGpio" class="form-control-label"><%= language.gpio %>:</label>
                            <select id="frmInGpio" class="form-control">
                    </select>
                        </div>
                        <div class="form-group">
                            <label for="frmInEdge" class="form-control-label"><%= language.edge %>:</label>
                            <select id="frmInEdge" class="form-control">
                        <option>none</option><option>falling</option><option>raising</option><option>both</option>
                    </select>
                        </div>
                        <div class="form-group">
                            <label for="frmInDescription" class="form-control-label"><%= language.description %>:</label>
                            <input id="frmInDescription" class="form-control">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal"><%= language.cancel %></button>
                    <button id="btnSaveInput" type="button" class="btn btn-primary" data-dismiss="modal"><%= language.save %></button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit form for OUTPUT -->
    <div class="modal fade" id="frmOutput" tabindex="-1" role="dialog" aria-labelledby="frmOutputLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="frmOutputLabel">
                        <%= language.msgOutEditTitle %>
                    </h5>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="frmOutGpio" class="form-control-label"><%= language.gpio %>:</label>
                            <select id="frmOutGpio" class="form-control">
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="frmOutDescription" class="form-control-label"><%= language.description %>:</label>
                            <input id="frmOutDescription" class="form-control">
                        </div>
                        <div class="form-group">
                            <label for="frmOutValue" class="form-control-label"><%= language.value %>:</label>
                            <select id="frmOutValue" class="form-control">
                                    <option><%= language.off %></option><option><%= language.on %></option>
                                </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal"><%= language.cancel %></button>
                    <button id="btnSaveOutput" type="button" class="btn btn-primary" data-dismiss="modal"><%= language.save%></button>
                </div>
            </div>
        </div>
    </div>

    <!-- tables -->
    <div id="mainTable" class="container">
        <div class="panel panel-primary">
            <div class="panel-heading align-center"><%= language.inputTableTitle %></div>
            <div class="panel-body">
                <button id="inPortsAdd" type="button" class="btn btn-warning btn-sm" data-toggle="modal" data-target="#frmInput">
                <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>&nbsp;<%= language.add %></button>
                <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th><%= language.active %></th>
                                <th><%= language.gpio %></th>
                                <th><%= language.edge %></th>
                                <th><%= language.description %></th>
                                <th><%= language.status %></th>
                                <th><%= language.actions %></th>
                            </tr>
                        </thead>
                        <tbody>
                            <% for(var i=0; i<gpios.length; i++) { 
                                if (gpios[i].direction == 'in') { %>
                                    <tr>
                                        <td>
                                            <input class="ios8-switch ios8-switch-sm" id="zone<%= gpios[i].gpio %>" type="checkbox" <%=((gpios[i].active == '1' ) ? 'checked' : '')%>/>
                                            <label for="zone<%= gpios[i].gpio %>">&nbsp;</label>
                                        </td>
                                        <td class="<%=((gpios[i].active == '1' ) ? '' : 'disabledCell')%>"><%= gpios[i].gpio %></td>
                                        <td class="<%=((gpios[i].active == '1' ) ? '' : 'disabledCell')%>"><%= gpios[i].edge %></td>
                                        <td class="<%=((gpios[i].active == '1' ) ? '' : 'disabledCell')%>"><%= gpios[i].description %></td>
                                        <td class="<%=((gpios[i].active == '1' ) ? '' : 'disabledCell')%>" style="text-align:center">
                                            <input id="btnInput<%= gpios[i].gpio %>" class="btn <%=((gpios[i].value == '0' ) ? 'btn-success' : 'btn-danger')%> btnStatusInput disabled" type="button" value="<%=((gpios[i].value == '0' ) ? language.ok : language.alarm)%>"/>
                                        </td>
                                        <td class="<%=((gpios[i].active == '1' ) ? '' : 'disabledCell')%>" style="text-align:center">
                                            <button id="edit<%= gpios[i].gpio %>" type="button" class="btn btn-warning btn-sm btnEdit" data-toggle="modal" data-target="#frmInput">
                                            <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
                                            </button>&nbsp;
                                            <button id="delete<%= gpios[i].gpio %>" type="button" class="btn btn-warning btn-sm btnDelete">
                                            <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
                                            </button>
                                        </td>
                                    </tr>
                                <% } 
                            } %>      
                        </tbody>
                    </table>        
            </div>
        </div>
        <hr>
        <div class="panel panel-primary">
                <div class="panel-heading align-center"><%= language.outputTableTitle %></div>
                <div class="panel-body">
                    <button id="outPortsAdd" type="button" class="btn btn-warning btn-sm" data-toggle="modal" data-target="#frmOutput">
                    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>&nbsp;<%= language.add %></button>
                    <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th><%= language.gpio %></th>
                                    <th><%= language.description %></th>
                                    <th><%= language.status %></th>
                                    <th><%= language.actions %></th>
                                </tr>
                            </thead>
                            <tbody>
                                <% for(var i=0; i < gpios.length; i++) { 
                                    if (gpios[i].direction == 'out') { %>
                                        <tr>
                                            <td><%= gpios[i].gpio %></td>
                                            <td><%= gpios[i].description %></td>
                                            <td style="text-align:center">
                                            <input id="btnOutput<%= gpios[i].gpio %>" class="btn <%=((gpios[i].value == '0' ) ? 'btn-default' : 'btn-success')%> btnStatusOutput" 
                                                type="button" 
                                                value="<%=((gpios[i].value == '0' ) ? language.off : language.on)%>"/>
                                            </td>
                                            <td style="text-align:center">
                                            <button id="edit<%= gpios[i].gpio %>" type="button" class="btn btn-warning btn-sm btnEdit" data-toggle="modal" data-target="#frmOutput">
                                            <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
                                            </button>&nbsp;
                                            <button id="delete<%= gpios[i].gpio %>" type="button" class="btn btn-warning btn-sm btnDelete">
                                            <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
                                            </button>
                                            </td>
                                        </tr>
                                    <% } 
                                } %>      
                            </tbody>
                        </table>
        
                </div>
            </div>
        </div>


    <script src="/node_modules/jquery/dist/jquery.min.js"></script>
    <script src="/node_modules/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="../node_modules/ejs/ejs.js"></script>
    <script>
        $(document).ready(function () {
            //var time = (new Date()).getTime();
            //var client = 'CL' + time;
            //var socket = io('http://localhost:3000/', { query: 'user=' + client });
            
            // define the socket
            var socket = io();

            // connect function
            socket.on( 'connect', function () {
                console.log( 'Connected to server ');
            });

            // this function manages the emission coming from the server
            socket.on('toClient', function(data){
                var gpioNumber = data.gpio;
                var v = data.value;
                console.log("Received value [" + v + "] from [" + gpioNumber + "]")
                // detecting the button related to the message
                var button = $('#btnInput' + gpioNumber);

                if (v == 0) { //if the value is 0 the button is at rest then the color is green
                    button.removeClass('btn-danger');
                    button.addClass('btn-success');
                    button.val('<%=language.ok%>');
                } else { // else the color is red
                    button.removeClass('btn-success');
                    button.addClass('btn-danger');
                    button.val('<%=language.alarm%>');
                }
            });

            // disconnect function
            socket.on('disconnect', function () {
                socket.disconnect();
                console.log("Disconnected from the server");
            });

            // this function is called when the form for the INPUT ports is opened
            $('#frmInput').modal({
                keyboard: true,
                backdrop: "static",
                show: false
            }).on('show.bs.modal', function (event) {
                if (event.relatedTarget) { // if there is an event I get the event's sender
                    var senderId = (event.relatedTarget ? event.relatedTarget.id : "");
                    // the button ID is calculated only if the button triggering the event was an "edit" button
                    var buttonId = (event.relatedTarget.id !== "inPortsAdd" ? senderId.replace('edit', '') : "");
                    // if the button ID is not empty then we are in EDIT mode
                    if (buttonId) { // edit mode
                        // we need to generate dinamically the drop down list of the available ports
                        // since this is an EDIT operation we populate this drop down with all the values
                        var portsOptionHtml = '';
                        for (i = 2; i <= 27; i++) {
                            portsOptionHtml += '<option>' + i + '</option>';
                        }
                        // building the drop down
                        $('#frmInGpio').html(portsOptionHtml);

                        // setting the drop down with the selected row
                        $('#frmInGpio').val(buttonId);

                        // since we are in EDIT mode we cannot change the GPIO value
                        $('#frmInGpio').prop('disabled', true);

                        // let's get the entire row
                        var row = $(event.relatedTarget).closest('tr');
                        var columns = row.find('td');

                        // let's populate the fields in the form with the values of the selected columns
                        $('#frmInEdge').val(columns[2].textContent); // column EDGE
                        $('#frmInDescription').val(columns[3].textContent); // column DESCRIPTION
                    } else { // add mode
                        // the GPIO can be selected
                        $('#frmInGpio').prop('disabled', false);
                        
                        // the EDGE is initially set to 'none'
                        $('#frmInEdge').val('none');
                        
                        // the description is cleared 
                        $('#frmInDescription').val('');

                        // let's check what are the avaialble pins and based on that let's build the drop down list
                        // for the GPIOs
                        readAll(function (pins) {
                            var portsOptionHtml = '';
                            var unusedPins = [];
                            for (i = 2; i <= 27; i++) {
                                unusedPins.push(i);
                            }
                            for (i = 0; i < pins.length; i++) {
                                unusedPins[pins[i].gpio] = 0;
                            }
                            for (i = 2; i <= 27; i++) {
                                if(unusedPins[i] > 0) {
                                    portsOptionHtml += '<option>' + i +'</option>';
                                }
                            }
                            $('#frmInGpio').html(portsOptionHtml);
                        });
                    }
                }
            });
            
            // this function is called when the form for the OUTPUT ports is opened
            $('#frmOutput').modal({
                keyboard: true,
                backdrop: "static",
                show: false
            }).on('show.bs.modal', function (event) {
                if (event.relatedTarget) { // if there is an event I get the event's sender
                    var senderId = (event.relatedTarget ? event.relatedTarget.id : "");
                    // the button ID is calculated only if the button triggering the event was an "edit" button
                    var buttonId = (event.relatedTarget.id !== "outPortsAdd" ? senderId.replace('edit', '') : "");

                    // if the button ID is not empty then we are in EDIT mode
                    if (buttonId) { // edit mode
                        // we need to generate dinamically the drop down list of the available ports
                        // since this is an EDIT operation we populate this drop down with all the values
                        var portsOptionHtml = '';
                        for (i = 2; i <= 27; i++) {
                            portsOptionHtml += '<option>' + i + '</option>';
                        }

                        // building the drop down
                        $('#frmOutGpio').html(portsOptionHtml);

                        // setting the drop down with the selected row
                        $('#frmOutGpio').val(buttonId);

                        // since we are in EDIT mode we cannot change the GPIO value
                        $('#frmOutGpio').prop('disabled', true);

                        // let's get the entire row
                        var row = $(event.relatedTarget).closest('tr');
                        var columns = row.find('td');

                        // let's populate the fields in the form with the values of the selected columns
                        $('#frmOutDescription').val(columns[1].textContent); // column DESCRIPTION
                        $('#frmOutValue').val($(columns[2].children[0]).val()); // column VALUE
                    } else { // add mode
                        // the GPIO can be selected
                        $('#frmOutGpio').prop('disabled', false);

                        // the description is cleared 
                        $('#frmOutDescription').val('');

                        // let's check what are the avaialble pins and based on that let's build the drop down list
                        // for the GPIOs
                        readAll(function (pins) {
                            var portsOptionHtml = '';
                            var unusedPins = [];
                            for (i = 2; i <= 27; i++) {
                                unusedPins.push(i);
                            }
                            for (i = 0; i < pins.length; i++) {
                                unusedPins[pins[i].gpio] = 0;
                            }
                            for (i = 2; i <= 27; i++) {
                                if(unusedPins[i] > 0) {
                                    portsOptionHtml += '<option>' + i +'</option>';
                                }
                            }
                            $('#frmOutGpio').html(portsOptionHtml);
                        });
                    }
                }

            });

            $('#btnSaveInput').click(function (event) {
                // let's check if we are in EDIT mode
                var editMode = $('#frmInGpio').prop('disabled');

                var result = {};
                result.gpio = $('#frmInGpio').val();
                result.edge = $('#frmInEdge').val();
                result.direction = 'in';
                result.description = $('#frmInDescription').val();
                result.value = 0;

                if (editMode) {
                    setGpio(result);
                } else {
                    result.active = 0; // when a new GPIO IN is created it starts as inactive
                    addGpio(result);
                }
            });

            $('#btnSaveOutput').click(function (event) {
                // let's check if we are in EDIT mode
                var editMode = $('#frmOutGpio').prop('disabled');

                var result = {};
                result.gpio = $('#frmOutGpio').val();
                result.edge = 'none';
                result.direction = 'out';
                result.description = $('#frmOutDescription').val();
                result.value = (($('#frmOutValue').val() == '<%= language.off %>') ? 0 : 1);

                if (editMode) setGpio(result);
                else {
                    result.active = 1; // when a new GPIO OUT is created it starts as inactive
                    addGpio(result)
                };
            });

            $('.btnDelete').click(function (event) {
                var button = $(this);
                var buttonId = button.prop('id').replace('delete', '');
                removeGpio(buttonId);
            });

            $('.btnStatusOutput').click(function (event) {
                var buttonID = $(event.target).prop('id');
                var gpio = buttonID.replace('btnOutput', '');

                var p = {};
                p.gpio = gpio;

                if ($(event.target).hasClass('btn-default')) {
                    $(event.target).removeClass('btn-default');
                    $(event.target).addClass('btn-success');
                    $(event.target).val('<%=language.on%>');
                    p.value = 1;
                } else {
                    $(event.target).removeClass('btn-success');
                    $(event.target).addClass('btn-default');
                    $(event.target).val('<%=language.off%>');
                    p.value = 0;
                }
                setGpio(p);
            });

            $('.ios8-switch').click(function (event) {
                var button = $(this);
                var buttonId = button.prop('id').replace('zone', '');
                var checked = button.prop('checked');
                var row = $(this).closest('tr');
                var columns = row.find('td');
                var p = {};
                p.gpio = buttonId;
                if (!checked) {
                    for (i = 1; i < columns.length; i++) {
                        $(columns[i]).addClass('disabledCell');
                    }
                    p.active = 0;
                    //setGpioActive(buttonId,0);
                    //var buttonStatus = $('#btnInput'+buttonId);
                    //buttonStatus.removeClass('btn-danger');
                    //buttonStatus.addClass('btn-success');
                    //buttonStatus.val('<%=language.ok%>');
                } else {
                    for (i = 1; i < columns.length; i++) {
                        $(columns[i]).removeClass('disabledCell');
                    }
                    p.active = 1;
                    //setGpioActive(buttonId,1);
                    // in this case we should read the gpio's status and set the button status UI accordingly
                }
                console.log(p);
                setGpio(p);
                
            });

            // FUNCTIONS

            /**
             * readAll 
            **/
            function readAll(cb) {
                var settings = {
                    "url": "/readall",
                    "method": "GET"
                }

                $.ajax(settings).done(function (response, status, xhr) {
                    if (xhr.status == 200) {
                        var json = JSON.parse(response);
                        pins = json;
                        cb(pins);
                    } else {
                        console.log("ERROR: " + xhr.status);
                    }
                });

            }

            /**
             * addGpio 
            **/
            function addGpio(p) {
                if(p) {
                    var data = {
                        "active": p.active,
                        "direction": p.direction,
                        "edge": p.edge,
                        "description": p.description,
                        "value": p.value
                    };
                    var settings = {
                        "async": true,
                        "url": "/addgpio/" + p.gpio,
                        "method": "POST",
                        "headers": {
                            "Authorization": "Bearer 1234",
                            "content-type": "application/json",
                            "cache-control": "no-cache"
                        },
                        "data": JSON.stringify(data)
                    }
                    $.ajax(settings).done(function (response, status, xhr) {
                        if (xhr.status == 200) {
                            location.reload();
                            console.log(response);
                        } else {
                            console.log("ERROR: " + xhr.status);
                        }
                    });
                }
            }


            /**
             * setGpio 
            **/

            function setGpio(p) {
                if (p) {
                    var data = p;

                    var settings = {
                        "async": true,
                        "url": "/setgpio/" + p.gpio,
                        "method": "PUT",
                        "headers": {
                            "Authorization": "Bearer 1234",
                            "content-type": "application/json",
                            "cache-control": "no-cache"
                        },
                        "data": JSON.stringify(data)
                        }
                    $.ajax(settings).done(function (response, status, xhr) {
                        if (xhr.status == 200) {
                            location.reload();
                            console.log(response);
                        } else {
                            console.log("ERROR: " + xhr.status);
                        }
                    });
                }
            }



            /**
             * removeGpio 
            **/
            
            function removeGpio(gp) {
                if(gp) {
                    var settings = {
                        "url": "/removegpio/" + gp,
                        "method": "DELETE"
                    }

                    $.ajax(settings).done(function (response, status, xhr) {
                        if (xhr.status == 200) {
                            location.reload();
                            console.log(response);
                        } else {
                            console.log("ERROR: " + xhr.status);
                        }
                    });
                }
            }          


 

            function setgpioprop(n,v) {
                var data = {
                    "value": v
                };
                var settings = {
                    "async": true,
                    "url": "/setgpioprop/"+n,
                    "method": "PUT",
                    "headers": {
                        "Authorization": "Bearer 1234",
                        "content-type": "application/json",
                        "cache-control": "no-cache"
                    },
                    "data": JSON.stringify(data)
                }
                $.ajax(settings).done(function (response, status, xhr) {
                    if (xhr.status == 200) {
                        //location.reload();
                        console.log(response);
                    } else {
                        console.log("ERROR: " + xhr.status);
                    }
                });
                
            }

        });
    </script>

</body>

</html>